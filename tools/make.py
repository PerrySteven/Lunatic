# Lunatic make.py
# Tad Hardesty, aka SpaceManiac, 2011
# Autogenerates build/generated.make
# usage: 'python tools/make.py target cxxflags lnflags'

from glob import glob
from sys import argv
from os import path

target = argv[1]
cxxflags = argv[2]
linkflags = argv[3]

def getFileList(dir):
	result = []
	for file in map(lambda(x): x.replace('\\', '/'), glob(dir + '/*')):
		if path.isdir(file):
			result += getFileList(file)
		else:
			if file.endswith(".cpp"):
				result += [file]
	return result

def object(source):
	return objectDir + '/' + source.replace('.cpp', '.o')

objectDir = 'build/' + target
sourceFiles = getFileList('source')
objectFiles = map(object, sourceFiles)
objectFiles.append(objectDir + '/lunatic.res')

out = open('build/generated.make', 'w')
def write(ln): out.write(ln + '\n')

write('# Autogenerated makefile for target ' + target)
write('LDLIBS=' + linkflags)
write('CXXFLAGS=' + cxxflags)
write('OBJFILES=' + ' \\\n\t'.join(objectFiles))

write('bin/' + target + '.exe: ${OBJFILES}')
write('\t@mkdir -p bin')
write('\t${LINK.cc} -o bin/' + target + '.exe ${OBJFILES} ${LDLIBS}')

for source in sourceFiles:
	obj = object(source)
	write(obj + ': ' + source)
	write('\t@mkdir -p ' + path.split(obj)[0])
	write('\t$(COMPILE.cc) -o $@ ' + source)

write(objectDir + '/lunatic.res: source/lunatic.rc')
write('\twindres source/lunatic.rc -O coff -o ' + objectDir + '/lunatic.res')

out.close()

